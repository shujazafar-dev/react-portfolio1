{"version":3,"sources":["components/card.jsx","components/card-lists.component.jsx","components/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["card","props","monster","className","alt","src","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAceA,EAVF,SAACC,GAAW,IACbC,EAAYD,EAAZC,QACR,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACvB,6BAAKJ,EAAQK,WCGVC,EATE,SAACP,GAAW,IAClBQ,EAAYR,EAAZQ,SACP,OACI,qBAAKN,UAAU,YAAf,SACIM,EAASC,KAAI,SAAAR,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCSxCK,EAbG,SAACV,GAAW,IACvBW,EAA6BX,EAA7BW,YAAaC,EAAgBZ,EAAhBY,aAEhB,OACK,uBACGV,UAAU,aACVW,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCgCPG,EAvCf,kDACE,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,EADhB,qDASE,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAAS,EAAKP,SAAS,CAAET,SAAUgB,SAZ/C,oBAkBE,WAAU,IAAD,EAC2BE,KAAKL,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAEZS,EAAmBnB,EAASoB,QAAO,SAAC3B,GAAD,OACvCA,EAAQK,KAAKuB,cAAcC,SAASZ,EAAYW,kBAElD,OACE,8BACE,sBAAK3B,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CACES,YAAY,oBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUJ,SAAUmB,aAhC9B,GAAyBI,aCQVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8f27b14e.chunk.js","sourcesContent":["import React from 'react'\nimport  './components.style.css'\n\n\nconst card = (props) => {\n    const { monster } = props\n    return (\n        <div className='card-container'>\n            <img alt='monsters' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\n            <h1>{monster.name}</h1>\n        </div>\n    )\n}\n\nexport default card\n","import React from 'react'\nimport './components.style.css'\nimport Card from './card'\nconst CardList = (props) => {\n    const {monsters} = props    \n    return (\n        <div className='card-list'>\n           {monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\n\nconst SearchBox = (props) => {\nconst {placeholder, handleChange} = props\n\n    return (\n         <input\n            className='search-box'\n            type=\"search\"\n            placeholder={placeholder}\n            onChange={handleChange}\n          />\n    )\n}\n\nexport default SearchBox\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-lists.component\";\nimport SearchBox from \"./components/search-box\";\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((res) => this.setState({ monsters: res }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div>\n        <div className=\"App\">\n          <h1>Monsters App</h1>\n          <SearchBox\n            placeholder=\"search monster...\"\n            handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}